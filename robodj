#! /usr/bin/perl

use strict;
use warnings;

use Net::MPD;
use Getopt::Std;
use List::Util qw(shuffle min max first);
use Encode qw(decode);

my %own;

my %o=(h => $ENV{MPD_HOST} || 'localhost', # mpdhost
       p => $ENV{MPD_PORT} || '6600',      # mpdport
       c => 'robodj',                      # control channel and playlist
       n => 3,                             # maintain this queue
       s => 10,                            # queue window
       w => 20,                            # playlist window
         );

getopts('h:p:c:n:s:w:v',\%o);

my $mpd=Net::MPD->connect("$o{h}:$o{p}") or die "no connect";

$mpd->subscribe($o{c});

my @playlist;
my $playing=0;

my $status;

while (1) {
  my %ss=map {$_=> 1} $mpd->idle(qw(player playlist message));
  $status=$mpd->update_status;
  my $shuffle=0;
  if (exists $ss{message}) {
    foreach my $m ($mpd->read_messages) {
      my ($cmd,$parm)=split ' ',$m->{message},2;
      $parm ||= '';
      $cmd=lc($cmd);
      my %pl=map {$_->{playlist} => 1} $mpd->list_playlists;
      if ($cmd eq 'load' || $cmd eq 'add') {
        if ($cmd eq 'load') {
          if (exists $pl{$o{c}}) {
            $mpd->rm($o{c});
          }
        }
        my @pl;
        if (exists $pl{$parm}) { # it's an internal named playlist
          @pl=map {$_->{uri}} $mpd->list_playlist($parm);
        } elsif ($parm =~ /\.m3u$/i) { # it's a playlist file indexed in mpd
          foreach my $track (map {$_->{uri}} $mpd->list_playlist($parm)) {
            $track =~ s/[^\/]+\/\.\.\///g;
            push @pl,$track;
          }
        } else { # it's an individual track
          @pl=($parm);
        }
        map {$mpd->playlist_add($o{c},$_)} @pl;
      } elsif ($cmd eq 'clear' || $cmd eq 'die') {
        foreach my $queued ($mpd->playlist_info) {
          if (exists $own{$queued->{Id}}) {
            $mpd->delete_id($queued->{Id});
          }
        }
        if ($cmd eq 'die') {
          exit 0;
        }
        undef %own;
        $playing=0;
      } elsif ($cmd eq 'stop') {
        $playing=0;
      } elsif ($cmd eq 'window' && $parm =~ /([0-9]+)\s*\/\s*([0-9]+)/) {
        ($o{s},$o{w})=($1,$2);
      } elsif ($cmd eq 'start') {
        if ($parm =~ /([0-9]+)/) {
          $o{n}=$1;
        }
        $playing=1;
      }
    }
  }
  if ($playing) {
    if ($status->{state} eq 'stop') {
      @playlist=map {$_->{uri}} $mpd->list_playlist($o{c});
      addpl(int(rand()*scalar @playlist));
    } else {
      my $dirty=0;
      my @p=$mpd->playlist_info;
      { # remove my ownership mark from any song no longer on the playlist
        my %aid=map {$_->{Id} => 1} @p;
        foreach my $o (keys %own) {
          unless (exists $aid{$o}) {
            delete $own{$o};
          }
        }
      }
      {                         # how many queued songs are there
        my @myid;
        my $q=0;
        my $other=0;
        foreach my $queued (map {$p[$_]} $status->{song}+1 .. $#p) {
          $q++;
          if (exists $own{$queued->{Id}}) {
            push @myid,$queued;
          } elsif (@myid) {
            $other++;
          }
        }
        if ($o{v}) {
          warn scalar(@myid)."/$q owned, $other not owned\n";
        }
        if ($other) {
          $dirty=1;
          foreach my $queued (@myid) {
            $mpd->move_id($queued->{Id},$#p);
          }
        }
        if ($o{v}) {
          warn "$q future song(s)\n";
        }
        if ($q < $o{n}) { # add a song
          @playlist=map {$_->{uri}} $mpd->list_playlist($o{c});
          my @pl=@p;
          if (scalar @pl > $o{s}) {
            splice @pl,-$o{s};
          }
          my %q=map {$_->{uri}=>1} @p;
          my @uri=map {[split '/',$_->{uri}]} @pl;
          my %score;
          foreach (1..$o{w}) {
            my $candidate=int(rand()*scalar @playlist);
            if (exists $q{$playlist[$candidate]}) {
              next;
            }
            my $ci=[split '/',$playlist[$candidate]];
            my $score=0;
            my $kk=1;
            foreach my $ple (@uri) {
              $score+=similarity($ple,$ci)*$kk;
              $kk++;
            }
            if ($o{v}) {
              print $score,' ',substr($playlist[$candidate],-70),"\n";
            }
            push @{$score{$score}},$candidate;
          }
          my $k=min(keys %score);
          addpl($score{$k}[0]);
          $dirty=1;
        }
      }
      if ($dirty) { # at least one change to the queue was needed, soâ€¦
        next;
      }
    }
  }
}

sub addpl {
  my $ix=shift;
  my $uri=$playlist[$ix];
  if ($o{v}) {
    warn "Adding $uri...\n";
  }
  my $mid=$mpd->add_id($uri);
  $mpd->playlist_move($o{c},$ix,$#playlist);
  if ($status->{state} eq 'stop') {
    $mpd->play_id($mid);
  }
  $own{$mid}=1;
}

sub similarity {
  my $a=shift;
  my $b=shift;
  my $ix=(first {$a->[$_] ne $b->[$_]} (0..max($#{$a},$#{$b}))) || -1;
  return $ix+1;
}
